/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAaaBAaaB4Args } from "./CreateAaaBAaaB4Args";
import { UpdateAaaBAaaB4Args } from "./UpdateAaaBAaaB4Args";
import { DeleteAaaBAaaB4Args } from "./DeleteAaaBAaaB4Args";
import { AaaBAaaB4FindManyArgs } from "./AaaBAaaB4FindManyArgs";
import { AaaBAaaB4FindUniqueArgs } from "./AaaBAaaB4FindUniqueArgs";
import { AaaBAaaB4 } from "./AaaBAaaB4";
import { AaaBAaaB4Service } from "../aaaBAaaB4.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Aaabaaab4)
export class AaaBAaaB4ResolverBase {
  constructor(
    protected readonly service: AaaBAaaB4Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AaaBAaaB4",
    action: "read",
    possession: "any",
  })
  async _aaaBAaaB4sMeta(
    @graphql.Args() args: AaaBAaaB4FindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AaaBAaaB4])
  @nestAccessControl.UseRoles({
    resource: "AaaBAaaB4",
    action: "read",
    possession: "any",
  })
  async aaaBAaaB4s(
    @graphql.Args() args: AaaBAaaB4FindManyArgs
  ): Promise<AaaBAaaB4[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AaaBAaaB4, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AaaBAaaB4",
    action: "read",
    possession: "own",
  })
  async aaaBAaaB4(
    @graphql.Args() args: AaaBAaaB4FindUniqueArgs
  ): Promise<AaaBAaaB4 | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AaaBAaaB4)
  @nestAccessControl.UseRoles({
    resource: "AaaBAaaB4",
    action: "create",
    possession: "any",
  })
  async createAaaBAaaB4(
    @graphql.Args() args: CreateAaaBAaaB4Args
  ): Promise<AaaBAaaB4> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AaaBAaaB4)
  @nestAccessControl.UseRoles({
    resource: "AaaBAaaB4",
    action: "update",
    possession: "any",
  })
  async updateAaaBAaaB4(
    @graphql.Args() args: UpdateAaaBAaaB4Args
  ): Promise<AaaBAaaB4 | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AaaBAaaB4)
  @nestAccessControl.UseRoles({
    resource: "AaaBAaaB4",
    action: "delete",
    possession: "any",
  })
  async deleteAaaBAaaB4(
    @graphql.Args() args: DeleteAaaBAaaB4Args
  ): Promise<AaaBAaaB4 | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
